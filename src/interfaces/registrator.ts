// Generated by eosio-abi2ts 1.2.2 - eosio::abi/1.2

export type IAsset = string
export type IName = string
export type IPublicKey = string
export type ITimePointSec = string
export type IUint64 = number | string

export interface IAccounts {
  username: IName
  referer: IName
  registrator: IName
  type: IName
  status: IName
  meta: string
  reputation: IUint64
  registration_amount: IAsset
  registered_at: ITimePointSec
  signature_expires_at: ITimePointSec
}

export interface IBalances extends IBalancesBase {
}

export interface IBalancesBase {
  id: IUint64
  contract: IName
  quantity: IAsset
}

export interface IChangekey {
  username: IName
  public_key: IPublicKey
}

export interface IConfirmreg {
  coopname: IName
  member: IName
}

export interface IDocument {
  hash: string
  pkey: string
  sign: string
  meta: string
}

export interface IJoincoop {
  coopname: IName
  username: IName
  document: IDocument
}

export interface INewaccount {
  registrator: IName
  referer: IName
  username: IName
  public_key: IPublicKey
  signature_hash: string
  meta: string
}

export interface IOrgData {
  storage: IStorage
  is_cooperative: boolean
  coop_type: IName
  token_contract: IName
  announce: string
  description: string
  initial: IAsset
  minimum: IAsset
}

export interface IOrgs {
  username: IName
  parent_username: IName
  verifications: IVerification[]
  storages: IStorage[]
  is_cooperative: boolean
  is_active: boolean
  coop_type: IName
  token_contract: IName
  announce: string
  description: string
  registration: IAsset
  initial: IAsset
  minimum: IAsset
}

export interface IPlotData {
  storage: IStorage
  announce: string
  description: string
}

export interface IRegorg {
  coopname: IName
  username: IName
  params: IOrgData
}

export interface IRegplot {
  coopname: IName
  username: IName
  params: IPlotData
}

export interface IReguser {
  coopname: IName
  username: IName
  storage: IStorage
}

export interface IStorage {
  storage_username: IName
}

export interface IUpdate {
  username: IName
  meta: string
}

export interface IUsers {
  username: IName
  is_active: boolean
  storages: IStorage[]
  verifications: IVerification[]
}

export interface IVerificate {
  username: IName
  procedure: IName
}

export interface IVerification {
  verificator: IName
  is_verified: boolean
  procedure: IName
  created_at: ITimePointSec
  last_update: ITimePointSec
  notice: string
}
